#include <vnl/algo/vnl_algo_fwd.h>

#include <vnl/algo/vnl_adaptsimpson_integral.h>
#include <vnl/algo/vnl_adjugate.h>
#include <vnl/algo/vnl_amoeba.h>
#include <vnl/algo/vnl_bracket_minimum.h>
#include <vnl/algo/vnl_brent.h>
#include <vnl/algo/vnl_brent_minimizer.h>
#include <vnl/algo/vnl_chi_squared.h>
#include <vnl/algo/vnl_cholesky.h>
#include <vnl/algo/vnl_complex_eigensystem.h>
#include <vnl/algo/vnl_complex_generalized_schur.h>
#include <vnl/algo/vnl_conjugate_gradient.h>
#include <vnl/algo/vnl_convolve.h>
#include <vnl/algo/vnl_cpoly_roots.h>
#include <vnl/algo/vnl_determinant.h>
#include <vnl/algo/vnl_discrete_diff.h>
#include <vnl/algo/vnl_fft_1d.h>
#include <vnl/algo/vnl_fft_2d.h>
#include <vnl/algo/vnl_fft.h>
#include <vnl/algo/vnl_fit_parabola.h>
#include <vnl/algo/vnl_gaussian_kernel_1d.h>
#include <vnl/algo/vnl_generalized_eigensystem.h>
#include <vnl/algo/vnl_generalized_schur.h>
#include <vnl/algo/vnl_lbfgs.h>
#include <vnl/algo/vnl_lbfgsb.h>
#include <vnl/algo/vnl_ldl_cholesky.h>
#include <vnl/algo/vnl_levenberg_marquardt.h>
#include <vnl/algo/vnl_lsqr.h>
#include <vnl/algo/vnl_matrix_inverse.h>
#include <vnl/algo/vnl_matrix_update.h>
#include <vnl/algo/vnl_netlib.h>
#include <vnl/algo/vnl_orthogonal_complement.h>
#include <vnl/algo/vnl_powell.h>
#include <vnl/algo/vnl_qr.h>
#include <vnl/algo/vnl_real_eigensystem.h>
#include <vnl/algo/vnl_rnpoly_solve.h>
#include <vnl/algo/vnl_rpoly_roots.h>
#include <vnl/algo/vnl_scatter_3x3.h>
#include <vnl/algo/vnl_simpson_integral.h>
#include <vnl/algo/vnl_solve_qp.h>
#include <vnl/algo/vnl_sparse_lm.h>
#include <vnl/algo/vnl_sparse_lu.h>
#include <vnl/algo/vnl_sparse_symmetric_eigensystem.h>
#include <vnl/algo/vnl_svd.h>
#include <vnl/algo/vnl_svd_economy.h>
#include <vnl/algo/vnl_svd_fixed.h>
#include <vnl/algo/vnl_symmetric_eigensystem.h>

#include <vnl/algo/vnl_fft_base.h>
#include <vnl/algo/vnl_fft_prime_factors.h>

int main() { return 0; }
